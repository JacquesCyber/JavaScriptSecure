name: ZAP Baseline Scan

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  zap_scan:
    runs-on: ubuntu-latest
    
    env:
      MONGODB_URI: mongodb://localhost:27017/test_db
      NODE_ENV: test
    
    services:
      mongo:
        image: mongo:latest
        ports:
          - 27017:27017
        options: --health-cmd "mongosh --eval 'db.stats()'" --health-interval 10s --health-timeout 5s --health-retries 5
    
    steps:
      - name: üßæ Checkout code
        uses: actions/checkout@v4
        
      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: üì¶ Install dependencies
        run: npm ci
        
      - name: üîê Create SSL certificates and keys
        run: |
          # Create RSA private key (4096 bits for security)
          openssl genrsa -out private.pem 4096
          
          # Extract public key from private key (for cryptoUtils.js)
          openssl rsa -in private.pem -pubout -out public.pem
          
          # Create self-signed certificate for HTTPS server
          openssl req -x509 -new -key private.pem -out cert.pem -days 365 -nodes -subj "/CN=localhost"
          
          # Create key.pem (alias for private key - server.js expects this)
          cp private.pem key.pem
          
          echo "‚úÖ Generated all required certificate files:"
          ls -la *.pem
          
          echo "üîç Verifying files exist:"
          echo "private.pem: $(test -f private.pem && echo '‚úÖ' || echo '‚ùå')"
          echo "public.pem: $(test -f public.pem && echo '‚úÖ' || echo '‚ùå')"
          echo "cert.pem: $(test -f cert.pem && echo '‚úÖ' || echo '‚ùå')"
          echo "key.pem: $(test -f key.pem && echo '‚úÖ' || echo '‚ùå')"
          
      - name: üöÄ Start app
        run: |
          npm run dev &
          APP_PID=$!
          echo "APP_PID=$APP_PID" >> $GITHUB_ENV
          echo "Waiting for server to start..."
          sleep 15
          
      - name: üß™ Wait for /health endpoint
        run: |
          for i in {1..30}; do
            if curl -k --silent --fail https://localhost:3000/health; then
              echo "‚úÖ Server is up and healthy!"
              break
            fi
            echo "‚è≥ Waiting for server... (attempt $i/30)"
            sleep 3
          done
          
          # Final check
          if ! curl -k --silent --fail https://localhost:3000/health; then
            echo "‚ùå Server failed to start properly"
            exit 1
          fi
          
      - name: üõ°Ô∏è Run OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.12.0
        with:
          target: 'https://localhost:3000'
          cmd_options: '-config scanner.threadPerHost=5 -config scanner.attackOnStart=true -config api.disablekey=true -config ssl.ignoreCerts=true'
          fail_action: false
          allow_issue_writing: true
          
      - name: üïµÔ∏è‚Äç‚ôÇÔ∏è List ZAP output files
        if: always()
        run: |
          echo "Contents of current directory:"
          ls -la
          echo "Looking for ZAP reports..."
          find . -name "*.html" -o -name "*.json" -o -name "*.xml" | head -10
          
      - name: üìÅ Upload ZAP report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: zap-report-${{ github.run_number }}
          path: |
            report_html.html
            report_json.json
            report_md.md
          retention-days: 30
          
      - name: üßπ Cleanup
        if: always()
        run: |
          if [ ! -z "$APP_PID" ]; then
            echo "Stopping application (PID: $APP_PID)"
            kill $APP_PID || true
          fi